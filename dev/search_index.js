var documenterSearchIndex = {"docs":
[{"location":"libraries/data/","page":"ðŸ”— EarthSciData.jl","title":"ðŸ”— EarthSciData.jl","text":"","category":"page"},{"location":"libraries/data/#title:-\"Redirecting...\"","page":"ðŸ”— EarthSciData.jl","title":"title: \"Redirecting...\"","text":"","category":"section"},{"location":"libraries/data/","page":"ðŸ”— EarthSciData.jl","title":"ðŸ”— EarthSciData.jl","text":"<html>\n<head>\n    <meta http-equiv=\"refresh\" content=\"0; url=https://data.earthsci.dev/\" />\n</head>\n<body>\n    <p>If you are not redirected automatically, follow this <a href=\"https://data.earthsci.dev/\">link</a>.</p>\n</body>\n</html>","category":"page"},{"location":"libraries/overview/#Available-Software-Libraries","page":"Overview","title":"Available Software Libraries","text":"","category":"section"},{"location":"quickstart/using_earthsciml/#Using-EarthSciML","page":"Using EarthSciML","title":"Using EarthSciML","text":"","category":"section"},{"location":"quickstart/using_earthsciml/","page":"Using EarthSciML","title":"Using EarthSciML","text":"As we saw in Using ModelingToolkit, keeping track of variables and equations when working with complex models can be a challenge. EarthSciML is designed to streamline this process in the case of geoscientific model by providing utilities for coupling model components together and running them, and also by providing reference implementations of standard model components that can be used as building blocks to create larger-scale geoscientific models.","category":"page"},{"location":"quickstart/using_earthsciml/#Model-Components","page":"Using EarthSciML","title":"Model Components","text":"","category":"section"},{"location":"quickstart/using_earthsciml/","page":"Using EarthSciML","title":"Using EarthSciML","text":"EarthSciML model components are ModelingToolkit ODESystems which contain metadata which specifies how each component should be coupled to other components.","category":"page"},{"location":"quickstart/using_earthsciml/","page":"Using EarthSciML","title":"Using EarthSciML","text":"So, for example, we can create an instance of the SuperFast gas-phase chemistry model model from the GasChem package like this:","category":"page"},{"location":"quickstart/using_earthsciml/","page":"Using EarthSciML","title":"Using EarthSciML","text":"using GasChem\n\nchem = SuperFast()","category":"page"},{"location":"quickstart/using_earthsciml/","page":"Using EarthSciML","title":"Using EarthSciML","text":"It's just an ODESystem, so we can run it like any other ModelingToolkit model:","category":"page"},{"location":"quickstart/using_earthsciml/","page":"Using EarthSciML","title":"Using EarthSciML","text":"using ModelingToolkit, OrdinaryDiffEq, Plots\n\nsol = solve(ODEProblem(structural_simplify(chem)), tspan=(0,2*3600))\n\nplot(sol, legend=:topright, xlabel=\"Time (s)\", ylabel=\"Concentration (ppb)\",\n    title=\"SuperFast Chemistry\")","category":"page"},{"location":"quickstart/using_earthsciml/#Coupling-Model-Components","page":"Using EarthSciML","title":"Coupling Model Components","text":"","category":"section"},{"location":"quickstart/using_earthsciml/","page":"Using EarthSciML","title":"Using EarthSciML","text":"EarthSciML model components differ from ordinary ModelingToolkit models in that they contain metadata that specifies how they should be coupled to other components. (In particular, this is done by specifying :coupletype metadata and the EarthSciMLBase.couple2 function, which is covered in more detail here.) This allows us to use the EarthSciMLBase.couple function to couple model components together into a single model that can be run as a single unit, for example as shown below:","category":"page"},{"location":"quickstart/using_earthsciml/","page":"Using EarthSciML","title":"Using EarthSciML","text":"using EarthSciMLBase\n\nchem_phot = couple(\n    SuperFast(),\n    FastJX()\n)","category":"page"},{"location":"quickstart/using_earthsciml/","page":"Using EarthSciML","title":"Using EarthSciML","text":"The above example couples the SuperFast with the Fast-JX photolysis model, and when we run them together as a coupled model, we can see a characteristic diurnal cycle in the Oâ‚ƒ concentration, were concentrations are lower at night and higher during the day owing to photochemistry:","category":"page"},{"location":"quickstart/using_earthsciml/","page":"Using EarthSciML","title":"Using EarthSciML","text":"chem_phot_sys = convert(ODESystem, chem_phot)\nsol = solve(ODEProblem(chem_phot_sys), tspan=(0,3*24*3600))\n\nplot(sol.t, sol[chem_phot_sys.SuperFastâ‚ŠO3], legend=:topright, xlabel=\"Time (s)\", \n    ylabel=\"Oâ‚ƒ Concentration (ppb)\", label=:none, \n    title=\"SuperFast Chemistry + Fast-JX Photolysis\")","category":"page"},{"location":"quickstart/using_earthsciml/#External-Data","page":"Using EarthSciML","title":"External Data","text":"","category":"section"},{"location":"quickstart/using_earthsciml/","page":"Using EarthSciML","title":"Using EarthSciML","text":"We can also bring in external data to provide forcing to our model using EarthSciData. For example, below we load GEOS-FP meteorological data and pollutant emissions from the U.S. National Emissions Inventory.","category":"page"},{"location":"quickstart/using_earthsciml/","page":"Using EarthSciML","title":"Using EarthSciML","text":"using EarthSciData\nusing Dates\n\ndomain = DomainInfo(\n    DateTime(2016, 5, 1),\n    DateTime(2016, 5, 3);\n    lonrange = deg2rad(-115):deg2rad(2.5):deg2rad(-68.75),\n    latrange = deg2rad(25):deg2rad(2):deg2rad(53.7),\n    levrange = 1:15,\n    dtype = Float64)\n\nemis = NEI2016MonthlyEmis(\"mrggrid_withbeis_withrwc\", domain; stream=false)\nemis = EarthSciMLBase.copy_with_change(emis, discrete_events=[]) # Workaround for bug.\n\nequations(emis)[1:5]","category":"page"},{"location":"quickstart/using_earthsciml/","page":"Using EarthSciML","title":"Using EarthSciML","text":"geosfp = GEOSFP(\"0.5x0.625_NA\", domain; stream=false)\ngeosfp = EarthSciMLBase.copy_with_change(geosfp, discrete_events=[]) # Workaround for bug.\n\nequations(geosfp)[1:5]","category":"page"},{"location":"quickstart/using_earthsciml/","page":"Using EarthSciML","title":"Using EarthSciML","text":"In order to load data products, we will usually need to specify a spatiotemporal domain as demonstrated above. Simulations that don't include a spatial component will use data from the centerpoint of the provided spatial domain.","category":"page"},{"location":"quickstart/using_earthsciml/","page":"Using EarthSciML","title":"Using EarthSciML","text":"We can add our data providers to our model from above. We'll also add in other processes important to a simplified model of air quality, such as deposition. The coupling process will automatically make the appropriate connections between the model components to build a unified model.","category":"page"},{"location":"quickstart/using_earthsciml/","page":"Using EarthSciML","title":"Using EarthSciML","text":"using AtmosphericDeposition\n\nmodel = couple(\n    SuperFast(),\n    FastJX(),\n    #DrydepositionG(), Not currently working\n    Wetdeposition(),\n    emis,\n    geosfp,\n)","category":"page"},{"location":"quickstart/using_earthsciml/#Box-Model-Simulation","page":"Using EarthSciML","title":"Box Model Simulation","text":"","category":"section"},{"location":"quickstart/using_earthsciml/","page":"Using EarthSciML","title":"Using EarthSciML","text":"Once we specify our model, we can try running it in a zero-dimensional \"box model\" format.  This can allow us study the dynamics or diagnose any programs without using a lot of computing power.","category":"page"},{"location":"quickstart/using_earthsciml/","page":"Using EarthSciML","title":"Using EarthSciML","text":"model_sys = convert(ODESystem, model)\nsol = solve(ODEProblem(model_sys), Rosenbrock23(), tspan=get_tspan(domain))\n\nplot(unix2datetime.(sol.t), sol[model_sys.SuperFastâ‚ŠO3],\n    ylabel=\"Oâ‚ƒ Concentration (ppb)\", \n    xlabel=\"Time\", label=:none, \n    title=\"Air Quality Box Model\")","category":"page"},{"location":"quickstart/using_earthsciml/#3D-Model-Simulation","page":"Using EarthSciML","title":"3D Model Simulation","text":"","category":"section"},{"location":"quickstart/using_earthsciml/","page":"Using EarthSciML","title":"Using EarthSciML","text":"Once we're satisfied with our box model, we can move on to a full 3D simulation. To do this, we'll add in any spatial operators that we'll need, for example advection from the EnvironmentalTransport package. We can also add in a model component that will write the model results to the disk, which can be useful for large simulations where the results may not all fit in the memory of your computer. Finally, we also need to add our spatiotemporal domain to the model.","category":"page"},{"location":"quickstart/using_earthsciml/","page":"Using EarthSciML","title":"Using EarthSciML","text":"using EnvironmentalTransport\n\ndt = 300.0 # Operator splitting timestep\nadvection = AdvectionOperator(dt, upwind1_stencil, ZeroGradBC())\n\noutfile = (\"RUNNER_TEMP\" âˆˆ keys(ENV) ? ENV[\"RUNNER_TEMP\"] : tempname()) * \"out.nc\" # This is just a location to save the output.\noutput = NetCDFOutputter(outfile, 3600.0) # Save output every 3600 sec. of simulation time,\n\nmodel_3d = couple(model, advection, output, domain)","category":"page"},{"location":"quickstart/using_earthsciml/#Graph-Visualization","page":"Using EarthSciML","title":"Graph Visualization","text":"","category":"section"},{"location":"quickstart/using_earthsciml/","page":"Using EarthSciML","title":"Using EarthSciML","text":"Once we've created our model, we can also check a graph representation of its components. This shows each of the components in the model as nodes and couplings between the components as edges.","category":"page"},{"location":"quickstart/using_earthsciml/","page":"Using EarthSciML","title":"Using EarthSciML","text":"using MetaGraphsNext\nusing CairoMakie, GraphMakie\n\ng = graph(model_3d)\nf = Figure(backgroundcolor = :transparent)\nax = Axis(f[1, 1], backgroundcolor = :transparent)\np = graphplot!(ax, g; ilabels=labels(g), edge_color=:gray)\nCairoMakie.xlims!(ax, -2.4, 1.5)\nCairoMakie.ylims!(ax, -2.3, 2.5)\nhidedecorations!(ax); hidespines!(ax)\nf","category":"page"},{"location":"quickstart/using_earthsciml/","page":"Using EarthSciML","title":"Using EarthSciML","text":"So for example in the figure above we can see that WetDeposition is coupled to SuperFast (because it is depositing the SuperFast chemical species) and to GEOS-FP (because it gets information such as Temperature and cloud fraction from GEOS-FP).","category":"page"},{"location":"quickstart/using_earthsciml/#Running-3D-simulation","page":"Using EarthSciML","title":"Running 3D simulation","text":"","category":"section"},{"location":"quickstart/using_earthsciml/","page":"Using EarthSciML","title":"Using EarthSciML","text":"Running a 3D simulation is similar to running the box model simulation, except we need to specify a SolverStrategy which will tell the solver how to combine the non-spatial and spatial components of the model. Here we will use SolverStrangSerial.","category":"page"},{"location":"quickstart/using_earthsciml/","page":"Using EarthSciML","title":"Using EarthSciML","text":"We then use our solver strategy as an argument to ODEProblem. We also specify some options in solve show a progress bar (because this simulation can take a while) and to prevent the output data from being saved in memory because we have already specified that we want to save it to disk instead.","category":"page"},{"location":"quickstart/using_earthsciml/","page":"Using EarthSciML","title":"Using EarthSciML","text":"st = SolverStrangSerial(Rosenbrock23(), dt)\n\nprob = ODEProblem(model_3d, st)\n\nusing ProgressLogging # Needed for progress bar. Use `TerminalLoggers` if in a terminal.\n\nsol = solve(prob, SSPRK22(); dt=dt, progress=true, progress_steps=1,\n    save_on=false, save_start=false, save_end=false, initialize_save=false)","category":"page"},{"location":"quickstart/using_earthsciml/#Visualizing-3D-model-results","page":"Using EarthSciML","title":"Visualizing 3D model results","text":"","category":"section"},{"location":"quickstart/using_earthsciml/","page":"Using EarthSciML","title":"Using EarthSciML","text":"Because we have saved our results to disk instead of in the sol variable, we need to visualize differently than we have above. To do so, we can use the NCDatasets package.","category":"page"},{"location":"quickstart/using_earthsciml/","page":"Using EarthSciML","title":"Using EarthSciML","text":"using NCDatasets\n\nds = NCDataset(outfile, \"r\");\n\ncross_section_lat = size(ds[\"SuperFastâ‚ŠO3\"], 2) Ã· 2\nanim = @animate for i âˆˆ 1:size(ds[\"SuperFastâ‚ŠO3\"])[4]\n    Plots.plot(\n        Plots.heatmap(ds[\"SuperFastâ‚ŠO3\"][:, :, 1, i]', title=\"Ground-Level\"),\n        Plots.heatmap(ds[\"SuperFastâ‚ŠO3\"][:, cross_section_lat, :, i]', \n            title=\"Vertical Cross-Section\"),\n        size=(1200, 400)\n    )\nend\ngif(anim, fps = 5)","category":"page"},{"location":"quickstart/using_earthsciml/#Next-Steps","page":"Using EarthSciML","title":"Next Steps","text":"","category":"section"},{"location":"quickstart/using_earthsciml/","page":"Using EarthSciML","title":"Using EarthSciML","text":"Now that you have a basic understanding of how to use EarthSciML, you can take a look at the model components and features available in the different Available Software Libraries that we provide.","category":"page"},{"location":"contributing/#Contributing","page":"Contributing","title":"Contributing","text":"","category":"section"},{"location":"contributing/#Governance","page":"Contributing","title":"Governance","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"The governance of EarthSciML is based on the Plural Management model. Members of the EarthSciML community can earn credits by contributing features, documentation, or fixes to the project, and then can use those credits to vote on the direction of the project.","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"To participate, you can:","category":"page"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"Install the gov4git (but maybe now called gitrules) tool;\nLogin using your GitHub account;\nClick on your username in the top right corner; and\nScroll down to the bottom and add the URL for one or more of the EarthSciML github repsitories:\nhttps://github.com/EarthSciML/EarthSciMLBase.jl (community dashboard here)\nhttps://github.com/EarthSciML/AtmosphericDeposition.jl (community dashboard here)\nhttps://github.com/EarthSciML/GasChem.jl (community dashboard here)\nhttps://github.com/EarthSciML/Aerosol.jl (community dashboard here)\nhttps://github.com/EarthSciML/Emissions.jl (community dashboard here)\nhttps://github.com/EarthSciML/EarthSciData.jl (community dashboard here)\nhttps://github.com/EarthSciML/EnvironmentalTransport.jl (community dashboard here)\nhttps://github.com/EarthSciML/earthsci.dev (i.e. this documentation website; community dashboard here)","category":"page"},{"location":"contributing/#Code-Contributions","page":"Contributing","title":"Code Contributions","text":"","category":"section"},{"location":"contributing/","page":"Contributing","title":"Contributing","text":"For guidelines regarding the contribution of code to EarthSciML, we follow the guidelines estabilished by the Julia SciML organization.  See the SciML contributor's guide here.","category":"page"},{"location":"edu/atmos_chem/#Atmospheric-Chemistry","page":"Atmospheric Chemistry","title":"Atmospheric Chemistry","text":"","category":"section"},{"location":"edu/atmos_chem/","page":"Atmospheric Chemistry","title":"Atmospheric Chemistry","text":"Atmospheric chemistry lessons that are currently available include:","category":"page"},{"location":"edu/atmos_chem/","page":"Atmospheric Chemistry","title":"Atmospheric Chemistry","text":"Production of Hydroxyl Radicals in the Troposphere","category":"page"},{"location":"libraries/aerosol/","page":"ðŸ”— Aerosol.jl","title":"ðŸ”— Aerosol.jl","text":"","category":"page"},{"location":"libraries/aerosol/#title:-\"Redirecting...\"","page":"ðŸ”— Aerosol.jl","title":"title: \"Redirecting...\"","text":"","category":"section"},{"location":"libraries/aerosol/","page":"ðŸ”— Aerosol.jl","title":"ðŸ”— Aerosol.jl","text":"<html>\n<head>\n    <meta http-equiv=\"refresh\" content=\"0; url=https://aerosol.earthsci.dev/\" />\n</head>\n<body>\n    <p>If you are not redirected automatically, follow this <a href=\"https://aerosol.earthsci.dev/\">link</a>.</p>\n</body>\n</html>","category":"page"},{"location":"examples/overview/#Examples","page":"Overview","title":"Examples","text":"","category":"section"},{"location":"libraries/transport/","page":"ðŸ”— EnvironmentalTransport.jl","title":"ðŸ”— EnvironmentalTransport.jl","text":"","category":"page"},{"location":"libraries/transport/#title:-\"Redirecting...\"","page":"ðŸ”— EnvironmentalTransport.jl","title":"title: \"Redirecting...\"","text":"","category":"section"},{"location":"libraries/transport/","page":"ðŸ”— EnvironmentalTransport.jl","title":"ðŸ”— EnvironmentalTransport.jl","text":"<html>\n<head>\n    <meta http-equiv=\"refresh\" content=\"0; url=https://transport.earthsci.dev/\" />\n</head>\n<body>\n    <p>If you are not redirected automatically, follow this <a href=\"https://transport.earthsci.dev/\">link</a>.</p>\n</body>\n</html>","category":"page"},{"location":"quickstart/prepare_environment/#Preparing-Your-Environment","page":"Preparing Your Environment","title":"Preparing Your Environment","text":"","category":"section"},{"location":"quickstart/prepare_environment/#Installing-Julia","page":"Preparing Your Environment","title":"Installing Julia","text":"","category":"section"},{"location":"quickstart/prepare_environment/","page":"Preparing Your Environment","title":"Preparing Your Environment","text":"EarthSciML is based on the Julia programming language. To get started, you'll need to install Julia. You can download the latest version of Julia from the official website.","category":"page"},{"location":"quickstart/prepare_environment/","page":"Preparing Your Environment","title":"Preparing Your Environment","text":"After installing, you can use Julia straight from the command line:","category":"page"},{"location":"quickstart/prepare_environment/","page":"Preparing Your Environment","title":"Preparing Your Environment","text":"julia","category":"page"},{"location":"quickstart/prepare_environment/","page":"Preparing Your Environment","title":"Preparing Your Environment","text":"which will give you the Julia REPL (Read-Evaluate-Print Loop) that you can start entering commands into directly. However, most users prefer to use some sort of development environment to work with Julia. Some common options include:","category":"page"},{"location":"quickstart/prepare_environment/","page":"Preparing Your Environment","title":"Preparing Your Environment","text":"Pluto notebooks, which are an interactive way to work with Julia code in a notebook format. Installation instructions are here.\nJupyter notebooks, which are a more traditional notebook format that can be used with Julia. Installation instructions are here.\nVS Code, which is a popular code editor that has a Julia extension. Installation instructions are here.","category":"page"},{"location":"quickstart/prepare_environment/#Installing-Software-Packages","page":"Preparing Your Environment","title":"Installing Software Packages","text":"","category":"section"},{"location":"quickstart/prepare_environment/","page":"Preparing Your Environment","title":"Preparing Your Environment","text":"EarthSciML is a collection of Julia software packages that are designed to work together and to work with other packages in the Julia ecosystem. To use any of the packages, you first need to install and load them. How to do this varies slightly depending on the development environment you're using:","category":"page"},{"location":"quickstart/prepare_environment/#In-the-Terminal-or-in-VS-Code","page":"Preparing Your Environment","title":"In the Terminal or in VS Code","text":"","category":"section"},{"location":"quickstart/prepare_environment/","page":"Preparing Your Environment","title":"Preparing Your Environment","text":"After starting Julia, for example by typing julia in a terminal or by entering cmd/ctrl + shift + p in VS Code and the typing Julia: Start REPL, you can install a package by entering the package manager mode by pressing the ] key, then typing add followed by the package name, for example:","category":"page"},{"location":"quickstart/prepare_environment/","page":"Preparing Your Environment","title":"Preparing Your Environment","text":"] add EarthSciMLBase","category":"page"},{"location":"quickstart/prepare_environment/","page":"Preparing Your Environment","title":"Preparing Your Environment","text":"Then, you can press the backspace key to exit the package manager mode and the load the package by typing (for example):","category":"page"},{"location":"quickstart/prepare_environment/","page":"Preparing Your Environment","title":"Preparing Your Environment","text":"> using EarthSciMLBase","category":"page"},{"location":"quickstart/prepare_environment/#In-a-Pluto-Notebook","page":"Preparing Your Environment","title":"In a Pluto Notebook","text":"","category":"section"},{"location":"quickstart/prepare_environment/","page":"Preparing Your Environment","title":"Preparing Your Environment","text":"In Pluto notebooks, you don't need to worry about installing the package, you can just directly load it in one of the notebook cells, for example using EarthSciMLBase.","category":"page"},{"location":"quickstart/prepare_environment/#In-a-Jupyter-Notebook","page":"Preparing Your Environment","title":"In a Jupyter Notebook","text":"","category":"section"},{"location":"quickstart/prepare_environment/","page":"Preparing Your Environment","title":"Preparing Your Environment","text":"It is not straightforward to install packages from within Jupyter notebooks. Instead, you can install the package from the Julia terminal as described above, then restart the Jupyter kernel.","category":"page"},{"location":"quickstart/prepare_environment/#Keeping-Track-of-Your-Work","page":"Preparing Your Environment","title":"Keeping Track of Your Work","text":"","category":"section"},{"location":"quickstart/prepare_environment/","page":"Preparing Your Environment","title":"Preparing Your Environment","text":"In any computing project, it is important to have to organize your work and keep track of different versions of different documents. There are obviously many different ways to do this, but one common way is to use a version control system like Git, and potentially a system for backing up and sharing your code such as GitHub. You can interact with Git and GitHub directly within VS Code, as described here, or you could use a standalone app such as GitHub Desktop.","category":"page"},{"location":"quickstart/prepare_environment/#Next-Steps","page":"Preparing Your Environment","title":"Next Steps","text":"","category":"section"},{"location":"quickstart/prepare_environment/","page":"Preparing Your Environment","title":"Preparing Your Environment","text":"Now that we've got our work environment set up, let's look at how to use ModelingToolkit, which is the Julia library with EarthSciML is built on top of.  Or, if you prefer, you can skip directly to Using EarthSciML.","category":"page"},{"location":"libraries/base/","page":"ðŸ”— EarthSciMLBase.jl","title":"ðŸ”— EarthSciMLBase.jl","text":"","category":"page"},{"location":"libraries/base/#title:-\"Redirecting...\"","page":"ðŸ”— EarthSciMLBase.jl","title":"title: \"Redirecting...\"","text":"","category":"section"},{"location":"libraries/base/","page":"ðŸ”— EarthSciMLBase.jl","title":"ðŸ”— EarthSciMLBase.jl","text":"<html>\n<head>\n    <meta http-equiv=\"refresh\" content=\"0; url=https://base.earthsci.dev/\" />\n</head>\n<body>\n    <p>If you are not redirected automatically, follow this <a href=\"https://base.earthsci.dev/\">link</a>.</p>\n</body>\n</html>","category":"page"},{"location":"examples/optimization/#Analysis-and-Optimization","page":"Optimization","title":"Analysis and Optimization","text":"","category":"section"},{"location":"examples/optimization/","page":"Optimization","title":"Optimization","text":"There are many types of analysis and optimization that one may want to perform using a geoscientific model, for example calculating the relationship between an input and an output, or finding the value of an input or parameter that is consistent with a measured observation. A main goal of EarthSciML is to streamline and support these types of analysis.","category":"page"},{"location":"examples/optimization/#Gradient-Calculation","page":"Optimization","title":"Gradient Calculation","text":"","category":"section"},{"location":"examples/optimization/","page":"Optimization","title":"Optimization","text":"Many types of analysis and optimization require knowledge of the relationship between one or more of a model's outputs and one or more of its inputs or parameters. In other words, we often want to know if we change a model input or parameter, how will the model output change, or what change in the inputs or parameters is necessary to result in a desired change in the output. These types of relationships are referred to in mathematics as derivatives, gradients, or Jacobians, depending on the number of inputs and outputs involved. In this example, we are going to calculate the gradient of an model's average output air pollution concentration over time with respect to parameters in the model, which will tell us how we should change those parameters to change the model output in a certain way.","category":"page"},{"location":"examples/optimization/","page":"Optimization","title":"Optimization","text":"To start, we will define an air quality model similar to the one described in Using EarthSciML:","category":"page"},{"location":"examples/optimization/","page":"Optimization","title":"Optimization","text":"using EarthSciMLBase, GasChem, AtmosphericDeposition, EarthSciData\nusing EnvironmentalTransport, ModelingToolkit, OrdinaryDiffEq\nusing FiniteDiff\nusing SymbolicIndexingInterface\nusing ModelingToolkit: t\nusing Dates, Plots, NCDatasets, Statistics, DynamicQuantities\nusing ProgressLogging # Needed for progress bar. Use `TerminalLoggers` if in a terminal.\n\ndomain = DomainInfo(\n    DateTime(2016, 5, 1),\n    DateTime(2016, 5, 1, 1);\n    lonrange = deg2rad(-115):deg2rad(2.5):deg2rad(-68.75),\n    latrange = deg2rad(25):deg2rad(2):deg2rad(53.7),\n    levrange = 1:15,\n    dtype = Float64)\n\ngeosfp = GEOSFP(\"0.5x0.625_NA\", domain; stream=false)\ngeosfp = EarthSciMLBase.copy_with_change(geosfp, discrete_events=[]) # Workaround for bug.\n\nemis = NEI2016MonthlyEmis(\"mrggrid_withbeis_withrwc\", domain; stream=false)\nemis = EarthSciMLBase.copy_with_change(emis, discrete_events=[]) # Workaround for bug.\n\ndt = 300.0 # Operator splitting timestep\n\nmodel_base = couple(\n    SuperFast(),\n    FastJX(),\n    #DrydepositionG(), Not currently working\n    Wetdeposition(),\n    AdvectionOperator(dt, upwind1_stencil, ZeroGradBC()),\n    emis,\n    geosfp,\n    domain\n)","category":"page"},{"location":"examples/optimization/","page":"Optimization","title":"Optimization","text":"In this example, we want to understand how we can \"nudge\" or adjust each of the variables in the model while it is running to achieve a desired output. So the first thing that we need to do is to create a new model component that includes the nudging factors. It gets slightly complicated, but what we want to do is to add a new term to each differential equation in our system that adjusts the rate of change of the variable in question by the current value of that variable times a \"nudge factor\". For more information about the specifics of what we're doing here, you can refer to the documentation about creating and composing model components for more information.","category":"page"},{"location":"examples/optimization/","page":"Optimization","title":"Optimization","text":"struct NudgeCoupler\n    sys\nend\nfunction Nudge(; name=:nudge)\n    vars = []\n    params = []\n    for i in 1:13\n        n = Symbol(:nudge_, i)\n        push!(vars, only(@variables $n(t) = 0.0 [unit = u\"s^-1\", description = \"Nudge for species $i\"]))\n        cn = Symbol(:nudge_c, i)\n        push!(params, only(@parameters $(cn) = 0.0 [unit = u\"s^-1\", description = \"Nudge constant for species $i\"]))\n    end\n    eqs = vars .~ params\n    ODESystem(eqs, t, [vars...], [params...]; name=name, metadata=Dict(:coupletype => NudgeCoupler))\nend\n\nfunction EarthSciMLBase.couple2(c::GasChem.SuperFastCoupler, n::NudgeCoupler)\n    c, n = c.sys, n.sys\n    operator_compose(c, n, Dict(\n        c.O3 => n.nudge_1 => c.O3,\n        c.OH => n.nudge_2 => c.OH,\n        c.HO2 => n.nudge_3 => c.HO2,\n        c.H2O => n.nudge_4 => c.H2O,\n        c.NO => n.nudge_5 => c.NO,\n        c.NO2 => n.nudge_6 => c.NO2,\n        c.CH3O2 => n.nudge_7 => c.CH3O2,\n        c.CH2O => n.nudge_8 => c.CH2O,\n        c.CO => n.nudge_9 => c.CO,\n        c.CH3OOH => n.nudge_10 => c.CH3OOH,\n        c.ISOP => n.nudge_11 => c.ISOP,\n        c.H2O2 => n.nudge_12 => c.H2O2,\n        c.HNO3 => n.nudge_13 => c.HNO3,\n    ))\nend\n\nmodel = couple(model_base, Nudge())","category":"page"},{"location":"examples/optimization/","page":"Optimization","title":"Optimization","text":"Once we've created our nudging model component and coupled it into our base model, we're almost ready to calculate our gradient. Before we do that, though, we need to get a few preliminaries out of the way, including extracting the nudging parameters from our model so that we can use them later and figuring out the location in the model results where the NO2 concentration is going to be stored, as that is the output that we're interested in adjusting.","category":"page"},{"location":"examples/optimization/","page":"Optimization","title":"Optimization","text":"model_sys = convert(ODESystem, model)\nnudge_params = parameters(model_sys)[[only(findall((x)->x==Symbol(:nudgeâ‚Šnudge_c, i), Symbol.(parameters(model_sys)))) for i in 1:13]]\n\nusize = size(EarthSciMLBase.init_u(model_sys, domain))\niNO2 = only(findall((x) -> x==Symbol(\"SuperFastâ‚ŠNO2(t)\"), Symbol.(unknowns(model_sys))))\n\nst = SolverStrangSerial(Rosenbrock23(), dt)\nprob = ODEProblem(model, st)","category":"page"},{"location":"examples/optimization/","page":"Optimization","title":"Optimization","text":"The last thing that we need to set up is an objective function: what do we want to calculate the gradient with respect to? In this case, let's say that we know that our model should always output an NO2 concentration of 42 ppb, so we're interested in finding nudging factors that minimize the difference between the model's predicted NO2 concentration and 42 ppb at all times.","category":"page"},{"location":"examples/optimization/","page":"Optimization","title":"Optimization","text":"To operationalize this goal, we create a function that we'll call loss that takes a vector of nudging factors as input, runs the model with those nudging factors, and calculates the mean squared difference between the model's predicted NO2 concentration and 42 ppb.","category":"page"},{"location":"examples/optimization/","page":"Optimization","title":"Optimization","text":"function loss(nudge_vals)\n    the_answer = 42.0\n    new_params = remake_buffer(model_sys, prob.p, Dict(nudge_params .=> nudge_vals))\n    #newprob = remake(prob, p=new_params)#, u0=eltype(nudge_vals).(prob.u0))\n    newprob = ODEProblem(model, st, p=new_params)\n    sol = solve(newprob, SSPRK22(); dt=dt, progress=true, progress_steps=1, saveat=600)\n    mean([mean((reshape(ui, usize...)[iNO2] .- the_answer).^2) for ui in sol.u])\nend","category":"page"},{"location":"examples/optimization/","page":"Optimization","title":"Optimization","text":"Since there are 13 chemical species in our model, we have 13 nudging factors, so we can run the loss function with a vector of 13 zeros to see what the loss is with no nudging factors applied.","category":"page"},{"location":"examples/optimization/","page":"Optimization","title":"Optimization","text":"loss(zeros(13))","category":"page"},{"location":"examples/optimization/","page":"Optimization","title":"Optimization","text":"We can also see how our loss value changes if we nudge the derivatives of all the model variables down by 10%:","category":"page"},{"location":"examples/optimization/","page":"Optimization","title":"Optimization","text":"loss(zeros(13) .- 0.1)","category":"page"},{"location":"examples/optimization/","page":"Optimization","title":"Optimization","text":"As you can see, the loss is higher in this new simulation, which means that our change made things worse! So what values of the nudging factors should we use to make the loss as small as possible?","category":"page"},{"location":"examples/optimization/","page":"Optimization","title":"Optimization","text":"The first step to get that answer is to calculate the gradient of the loss function with respect to the nudging factors, so we know which direction to change each nudging factor to make the loss smaller.","category":"page"},{"location":"examples/optimization/","page":"Optimization","title":"Optimization","text":"Ideally, we would use automatic differentiation to calculate the gradient, but that's not working at the moment, we will use finite differences to calculate the gradient instead:","category":"page"},{"location":"examples/optimization/","page":"Optimization","title":"Optimization","text":"# ForwardDiff.gradient(loss, zeros(13))\ngrad = FiniteDiff.finite_difference_gradient(loss, zeros(13))\n\nbar([\"O3\", \"OH\", \"HO2\", \"H2O\", \"NO\", \"NO2\", \"CH3O2\", \"CH2O\", \"CO\", \n    \"CH3OOH\", \"ISOP\", \"H2O2\", \"HNO3\"], grad, permute=(:x, :y), size=(400, 250),\n    label=:none, xlabel=\"Species\", ylabel=\"Nudging Sensitivity\")","category":"page"},{"location":"examples/optimization/","page":"Optimization","title":"Optimization","text":"Now that's a start! We can see that the error in NO2 concentrations is most sensitive to adjustments to NO2 dynamics (unsurprisingly), but also sensitive to adjustments in CH3O2, NO, and O3.","category":"page"},{"location":"examples/optimization/","page":"Optimization","title":"Optimization","text":"That's all we have for now, but we will add to this example as we build out the EarthSciML optimization and analysis capabilities. Check back soon!","category":"page"},{"location":"libraries/deposition/","page":"ðŸ”— AtmosphericDeposition.jl","title":"ðŸ”— AtmosphericDeposition.jl","text":"","category":"page"},{"location":"libraries/deposition/#title:-\"Redirecting...\"","page":"ðŸ”— AtmosphericDeposition.jl","title":"title: \"Redirecting...\"","text":"","category":"section"},{"location":"libraries/deposition/","page":"ðŸ”— AtmosphericDeposition.jl","title":"ðŸ”— AtmosphericDeposition.jl","text":"<html>\n<head>\n    <meta http-equiv=\"refresh\" content=\"0; url=https://deposition.earthsci.dev/\" />\n</head>\n<body>\n    <p>If you are not redirected automatically, follow this <a href=\"https://deposition.earthsci.dev/\">link</a>.</p>\n</body>\n</html>","category":"page"},{"location":"examples/scenario_analysis/#Scenario-Analysis","page":"Scenario Analysis","title":"Scenario Analysis","text":"","category":"section"},{"location":"examples/scenario_analysis/","page":"Scenario Analysis","title":"Scenario Analysis","text":"A common application in geoscientific modeling is conducting scenario analysis: comparing the results of a model under different sets of assumptions or conditions. In this example, we will demonstrate how to use EarthSciML to conduct a simple scenario analysis, comparing the results of a model of atmospheric chemistry under two different sets of emissions.","category":"page"},{"location":"examples/scenario_analysis/","page":"Scenario Analysis","title":"Scenario Analysis","text":"First, we create a base model containing all the components that will be shared between the two scenarios. This model is similar to the one described in detail in Using EarthSciML, including a gas-phase chemistry model, a photolysis model, emissions data, and meteorological data:","category":"page"},{"location":"examples/scenario_analysis/","page":"Scenario Analysis","title":"Scenario Analysis","text":"using EarthSciMLBase, GasChem, AtmosphericDeposition, EarthSciData\nusing EnvironmentalTransport, ModelingToolkit, OrdinaryDiffEq\nusing Dates, Plots, NCDatasets\nusing ProgressLogging # Needed for progress bar. Use `TerminalLoggers` if in a terminal.\n\ndomain = DomainInfo(\n    DateTime(2016, 5, 1),\n    DateTime(2016, 5, 3);\n    lonrange = deg2rad(-115):deg2rad(2.5):deg2rad(-68.75),\n    latrange = deg2rad(25):deg2rad(2):deg2rad(53.7),\n    levrange = 1:15,\n    dtype = Float64)\n\ngeosfp = GEOSFP(\"0.5x0.625_NA\", domain; stream=false)\ngeosfp = EarthSciMLBase.copy_with_change(geosfp, discrete_events=[]) # Workaround for bug.\n\nemis = NEI2016MonthlyEmis(\"mrggrid_withbeis_withrwc\", domain; stream=false)\nemis = EarthSciMLBase.copy_with_change(emis, discrete_events=[]) # Workaround for bug.\n\ndt = 300.0 # Operator splitting timestep\n\nbase_model = couple(\n    SuperFast(),\n    FastJX(),\n    #DrydepositionG(), Not currently working\n    Wetdeposition(),\n    AdvectionOperator(dt, upwind1_stencil, ZeroGradBC()),\n    emis,\n    geosfp,\n    domain\n)","category":"page"},{"location":"examples/scenario_analysis/","page":"Scenario Analysis","title":"Scenario Analysis","text":"Once we've created a base model, we can then add in the components that will be unique to each scenario. In this case, we will create two scenarios: a \"business as usual\" scenario and a \"reduced emissions\" scenario. For our business as usual scenario, the only component we need to add is one that writes the model output to a file called bau_output.nc.","category":"page"},{"location":"examples/scenario_analysis/","page":"Scenario Analysis","title":"Scenario Analysis","text":"bau_outfile = (\"RUNNER_TEMP\" âˆˆ keys(ENV) ? ENV[\"RUNNER_TEMP\"] : tempname()) * \"bau_output.nc\" # This is just a location to save the output.\nbau_model = couple(base_model, NetCDFOutputter(bau_outfile, 3600.0))","category":"page"},{"location":"examples/scenario_analysis/","page":"Scenario Analysis","title":"Scenario Analysis","text":"In this case, we want to explore the impacts of a 30% reduction in emissions from the \"onroad\" sector. To do this, we initialize a new emissions component only containing the emissions from the onroad sector, and we specify a scale factor of -0.3, which when added to the total emissions from all sectors that are already present in the base model represents the total emissions minus 30% of the onroad emissions. (Additional information about the emissions data we're using is available here.) We also create a component that writes the model output to a file called scenario_output.nc, and then we couple both of these components to the base model to create the scenario model.","category":"page"},{"location":"examples/scenario_analysis/","page":"Scenario Analysis","title":"Scenario Analysis","text":"@named scenario_emis = NEI2016MonthlyEmis(\"onroad\", domain; scale=-0.3, stream=false)\nscenario_emis = EarthSciMLBase.copy_with_change(scenario_emis, discrete_events=[]) # Workaround for bug.\n\n\nscenario_outfile = (\"RUNNER_TEMP\" âˆˆ keys(ENV) ? ENV[\"RUNNER_TEMP\"] : tempname()) * \"scenario_output.nc\"\nscenario_model = couple(base_model, scenario_emis, NetCDFOutputter(scenario_outfile, 3600.0))","category":"page"},{"location":"examples/scenario_analysis/","page":"Scenario Analysis","title":"Scenario Analysis","text":"Once we've configured both of out models, we can run them both as described in Using EarthSciML above:","category":"page"},{"location":"examples/scenario_analysis/","page":"Scenario Analysis","title":"Scenario Analysis","text":"st = SolverStrangSerial(Rosenbrock23(), dt)\n\nbau_prob = ODEProblem(bau_model, st)\nsol = solve(bau_prob, SSPRK22(); dt=dt, progress=true, progress_steps=1,\n    save_on=false, save_start=false, save_end=false, initialize_save=false)\n\n\nscenario_prob = ODEProblem(scenario_model, st)\nsol = solve(scenario_prob, SSPRK22(); dt=dt, progress=true, progress_steps=1,\n    save_on=false, save_start=false, save_end=false, initialize_save=false)\nnothing # hide","category":"page"},{"location":"examples/scenario_analysis/","page":"Scenario Analysis","title":"Scenario Analysis","text":"One the simulations are complete, we can compare the results of the two scenarios.  In this case, we'll create an animation that shows the difference in ground-level ozone concentrations between the two scenarios at each time step:","category":"page"},{"location":"examples/scenario_analysis/","page":"Scenario Analysis","title":"Scenario Analysis","text":"bau_data = NCDataset(bau_outfile, \"r\");\nscenario_data = NCDataset(scenario_outfile, \"r\");\n\nanim = @animate for i âˆˆ 1:size(bau_data[\"SuperFastâ‚ŠO3\"])[4]\n    Plots.plot(\n        Plots.heatmap(bau_data[\"SuperFastâ‚ŠO3\"][:, :, 1, i]', title=\"Business as Usual\"),\n        Plots.heatmap(scenario_data[\"SuperFastâ‚ŠO3\"][:, :, 1, i]', title=\"Scenario\"),\n        Plots.heatmap(scenario_data[\"SuperFastâ‚ŠO3\"][:, :, 1, i]' - \n            bau_data[\"SuperFastâ‚ŠO3\"][:, :, 1, i]', title=\"Difference\"),\n        size=(1900, 400), layout=(1, 3)\n    )\nend\ngif(anim, fps = 5)","category":"page"},{"location":"examples/scenario_analysis/","page":"Scenario Analysis","title":"Scenario Analysis","text":"You can see that in this case, the scenario with reduced emissions actually results in an increase on ozone concentrations during the short simulation time that we run. Can you think of any way to use the models above to explore why this might be happening?","category":"page"},{"location":"quickstart/using_mtk/#Using-ModelingToolkit","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"","category":"section"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"ModelingToolkit is a Julia library that provides a high-level interface for defining and manipulating mathematical models. It is the foundation of EarthSciML, and is used to define the physical and chemical processes that are used in EarthSciML models. Refer to the documentation for comprehensive information, but we'll go through a quick tutorial here.","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"The first step is to load the library (see Installing Software Packages for details):","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"using ModelingToolkit","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"We'll also be working with units here, which will help us check our work and avoid unit conversion errors.  This requires the DynamicQuantities package:","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"using DynamicQuantities","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"Finally, we will load a two specific variables from the ModelingToolkit library to make our code more concise, specifically t which is time in units of seconds, and D which is the differential operator with respect to t.","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"using ModelingToolkit: t, D","category":"page"},{"location":"quickstart/using_mtk/#Variables,-Parameters,-and-Constants","page":"Using ModelingToolkit","title":"Variables, Parameters, and Constants","text":"","category":"section"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"Using ModelingToolkit, we create models by defining systems of differential or algebraic equations, which in turn are functions of variables, parameters, and constants. We demonstrate how this works by modeling a chemical reaction.","category":"page"},{"location":"quickstart/using_mtk/#Variables","page":"Using ModelingToolkit","title":"Variables","text":"","category":"section"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"In ModelingToolkit, variables are entities that are affected by the dynamics of the system. Our reaction will have two variables A and B, which represent the concentrations of two chemical species. We define them like this:","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"@variables A(t) = 1 [unit=u\"kg/m^3\", description=\"Concentration of A\"]\n@variables B(t) = 0 [unit=u\"kg/m^3\", description=\"Concentration of B\"]\nnothing #hide","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"There's a lot going on there, let's unpack it.  @variables is something in Julia called a macro. Feel free to go to the link to see what a macro is, but for our purposes we just need to know that it specifies that we are defining a variable. The next part, A(t) or B(t), species the variable name and that the variable is a function of time t. After that, the = 1 or = 0 specifies the default initial value of the variable, which we can override later if we want. Finally, [unit=u\"kg/m^3\", description=\"Concentration of A\"] specifies the units of the variable and a description of what the variable represents.","category":"page"},{"location":"quickstart/using_mtk/#Parameters","page":"Using ModelingToolkit","title":"Parameters","text":"","category":"section"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"In ModelingToolkit, parameters are entities that are fixed for the duration of the simulation, but can be changed between simulations. Our model will have one parameter T, which represents the temperature of the system:","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"@parameters T = 293.15 [unit=u\"K\", description=\"Temperature\"]\nnothing #hide","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"@parameters works the same as @variables, but it specifies that we are defining a parameter instead of a variable. = 300 ","category":"page"},{"location":"quickstart/using_mtk/#Constants","page":"Using ModelingToolkit","title":"Constants","text":"","category":"section"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"Finally, constants in ModelingToolkit are values that are not expected to ever change. Our model will have contants T_0, which is a reference temperature, and k, which is a rate constant for the reaction:","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"@constants k = 0.1 [unit=u\"1/s\", description=\"Rate constant\"]\n@constants T_0 = 300 [unit=u\"K\", description=\"Initial temperature\"]\nnothing #hide","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"Now we're ready to define the equations that govern the dynamics of our system.","category":"page"},{"location":"quickstart/using_mtk/#Equation-Systems","page":"Using ModelingToolkit","title":"Equation Systems","text":"","category":"section"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"The equations that govern the dynamics of our system can be defined as a system of ordinary differential equations (ODEs). We can define them like this:","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"eqs = [\n    D(A) ~ -k * exp(T/T_0) * A,\n    D(B) ~ k * exp(T/T_0) * A\n]","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"Here, eqs is the variable we're creating to store our equations, the [...] square brackets enclose the list of equations we're creating (which are separated by a comma), D(A) and D(B) represent the derivatives of the variables A and B with respect to time, and ~ is where we would use = in a normal equation (because = already means something else in Julia). Overall, we have specified that A decreases and B increases at the rate of k * exp(T/T0) * A, which is just a standard first-order chemical reaction.","category":"page"},{"location":"quickstart/using_mtk/#Running-an-ODE-Simulation","page":"Using ModelingToolkit","title":"Running an ODE Simulation","text":"","category":"section"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"Now that we have defined our system of equations, we can run a simulation. First, we set up an ODESystem, which is a ModelingToolkit object that represents a system of ODEs.","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"@named sys = ODESystem(eqs, t, [A, B], [T])","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"Again, there's several parts here, but starting from the left: @named sys is saying the both the name of the model and the name of the variable we're assigning it to is sys. Then, ODESystem(eqs, t, [A, B], [T]) is creating a new ODESystem object, where eqs is the list of equations we defined earlier, t is the time variable, [A, B] is the list of variables, and [T] is the list of parameters.","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"Now, almost we're ready to run our simulation.  First we need the OrdinaryDiffEq package, which provides the differential equation solvers we need to solve our ODE system.","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"using OrdinaryDiffEq","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"Now, we do just a few more things: first, we run the structural_simplify function on our system, which checks if there are any manipulations that can be made to our equation system to make it easier to solve (there aren't any in this case). Then, we create an ODEProblem from our ODESystem. ODEProblems are structures are can directly be solved. Then, we finally can call the solve function to get the result of our simulation, which we save in the sol variable. When we call the solve function, we include the tspan=(0,10) argument, which specifies that we want to run the simulation with the start time of 0 seconds and the end time of 10 seconds.","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"sys_simplified = structural_simplify(sys)\nprob = ODEProblem(sys_simplified)\nsol = solve(prob, Tsit5(), tspan=(0,10))","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"The result of the simulation is shown above. Note that it starts with retcode: Success which means that the simulation was successful. If retcode is something else, the solution make include some results, but they will not be correct.","category":"page"},{"location":"quickstart/using_mtk/#Plotting-the-Results","page":"Using ModelingToolkit","title":"Plotting the Results","text":"","category":"section"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"There are many software packages in Julia that can be used to make plots. Here, we're going to use one called Plots.jl:","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"using Plots\n\nplot(sol, xlabel=\"time (s)\", ylabel=\"Concentration (kg/mÂ³)\")","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"The plot above shows that A starts out at a concentration of 1 and decreases over time, while B starts out at a concentration of 0 and increases over time at the same rate.","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"We can also re-run the simulation with different values of the parameters or different initial values for the variables, and compare the result. For example, in the code below, we increase the initial concentration of A to 1.5 and decrease the temperature to 100 K:","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"prob2 = ODEProblem(sys_simplified, [A=>1.5], (0, 10), [T=>100])\nsol2 = solve(prob2, Tsit5())\n\nplot(\n    plot(sol, xlabel=\"time (s)\", ylabel=\"Concentration (kg/mÂ³)\", \n        ylim=(0, 1.5), title=\"T=293.15\"),\n    plot(sol2, title=\"T=100\", xlabel=\"\", ylabel=\"\", legend=:none),\n    size=(1000, 400)\n)","category":"page"},{"location":"quickstart/using_mtk/#Partial-Differential-Equations","page":"Using ModelingToolkit","title":"Partial Differential Equations","text":"","category":"section"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"We can also simulate partial differential equations (PDEs) using ModelingToolkit. For example, we can consider the same reaction system as above, but occuring in a fluid that is moving. To do this, let's first define the boundaries of our spatial system, where we have x âˆˆ {0, 1}, y âˆˆ {0, 1}, and t âˆˆ {0, 10} as before.","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"x_min = y_min = t_min = 0.0\nx_max = y_max = 1.0\nt_max = 10.0","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"Let's split up our domain into 32 grid cells in each direction:","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"N = 32","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"and calculate the size of each grid cell:","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"dx = (x_max-x_min)/N\ndy = (y_max-y_min)/N","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"We can now create a function which injects emissions into the domain at a specific location:","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"islocation(x, y) = x > x_max / 2 - dx && x < x_max / 2 + dx && \n    y > y_max / 10 - dx && \n    y < y_max / 10 + dx\nemission(x, y) = ifelse(islocation(x, y), 10, 0)\n@register_symbolic emission(x, y)","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"(Because our emission function includes operations which are not allowed in ModelingToolkit, we have to register it as a symbolic function. See here for more information.)","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"We'll also add function to specify the movement of the fluid in the domain, which we will specify as traveling in a circle:","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"Î¸(x,y) = atan(y.-0.5, x.-0.5)\nu(x,y) = -sin(Î¸(x,y))\nv(x,y) = cos(Î¸(x,y))","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"Now we can re-create our equation system from above, but this time we will add terms to account for the advection of chemicals A and B in the host fluid. Because units and partial differential equations don't currently work together in ModelingToolkit, we will also recreate our variables, parameters, and constants without units.","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"@parameters T=293.15 x y\nt_ = ModelingToolkit.t_nounits # We want the time variable without units now.\nD_ = ModelingToolkit.D_nounits # We want the differential operator without units now.\n@constants k=0.1 T_0=300.0\n@variables A(..) B(..)\nDx = Differential(x)\nDy = Differential(y)\nadvect(var) = -u(x,y)*Dx(var) - v(x,y)*Dy(var)\neqs = [\n    D_(A(x,y,t_)) ~ advect(A(x, y, t_)) + emission(x, y) - k*exp(T/T_0)*A(x,y,t_),\n    D_(B(x,y,t_)) ~ advect(B(x, y, t_)) + k*exp(T/T_0)*A(x,y,t_),\n]","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"As you can see, we need to define the variables and equations slightly differently for PDEs. (See here for more information.)","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"Next, we need to more formally specify our spatial and temporal domain, which requires the DomainSets package:","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"using DomainSets\ndomain = [\n    x âˆˆ Interval(x_min, x_max),\n    y âˆˆ Interval(y_min, y_max),\n    t âˆˆ Interval(t_min, t_max),\n]","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"We also need to specify our boundary conditions:","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"bcs = [A(x,y,t_min) ~ 0.0,\n       A(x_min,y,t_) ~ A(x_max,y,t_),\n       A(x,y_min,t_) ~ A(x,y_max,t_),\n\n       B(x,y,t_min) ~ 0.0,\n       B(x_min,y,t_) ~ B(x_max,y,t_),\n       B(x,y_min,t_) ~ B(x,y_max,t_),\n] ","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"Now we can create our PDESystem, which is similar to an ODESystem but for PDEs.","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"@named pdesys = PDESystem(eqs, bcs, domain, [x,y,t], [A(x,y,t), B(x,y,t)], [T])","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"One additional difference with PDE systems is that we need to discretize them to convert them to an ODE system that we can solve.  To do this, we need to use the MethodOfLines package:","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"using MethodOfLines\ndiscretization = MOLFiniteDifference([x=>dx, y=>dy], t)\nprob = discretize(pdesys,discretization)","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"Then, we can finally run our simulation. This time, we specify a different ODE solver called TRBDF2. We also specify that we want to save the results at every 0.1 seconds:","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"sol = solve(prob, TRBDF2(), saveat=0.1)","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"Finally, we can plot the results of our simulation:","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"disc_t = sol[t]\ndisc_x = sol[x]\ndisc_y = sol[y]\nsolA = sol[A(x, y, t)]\nsolB = sol[B(x, y, t)]\n\nanim = @animate for i in eachindex(disc_t)\n    plot(\n        heatmap(disc_x, disc_y, solA[:,:,i], xlabel=\"x\", ylabel=\"y\", title=\"A Concentration\",\n            clim=(0, maximum(solA))),\n        heatmap(disc_x, disc_y, solB[:,:,i], title=\"B Concentration\",\n            clim=(0, maximum(solB))),\n        size=(1000, 400)\n    )\nend\ngif(anim, fps=8)","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"warning: Warning\nThis method for simulating PDEs currently doesn't work for large-scale simulations. EarthSciML currently uses a different method for representing spatial operators, which we will harmonize with the method shown here in the future.","category":"page"},{"location":"quickstart/using_mtk/#Isn't-There-an-Easier-Way?","page":"Using ModelingToolkit","title":"Isn't There an Easier Way?","text":"","category":"section"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"As you can see, we can use ModelingToolkit to define and simulate complex systems of equations. However, you can probably also see that as the system we're modeling gets more complex, it gets more complex to keep track of things and make sure everything is specified correctly. That's where EarthSciML comes in.","category":"page"},{"location":"quickstart/using_mtk/","page":"Using ModelingToolkit","title":"Using ModelingToolkit","text":"EarthSciML is a collection of Julia packages that are designed to simplify and automate the process of specifying geoscientific models using ModelingToolkit. Read on to see how it works!","category":"page"},{"location":"libraries/gaschem/","page":"ðŸ”— GasChem.jl","title":"ðŸ”— GasChem.jl","text":"","category":"page"},{"location":"libraries/gaschem/#title:-\"Redirecting...\"","page":"ðŸ”— GasChem.jl","title":"title: \"Redirecting...\"","text":"","category":"section"},{"location":"libraries/gaschem/","page":"ðŸ”— GasChem.jl","title":"ðŸ”— GasChem.jl","text":"<html>\n<head>\n    <meta http-equiv=\"refresh\" content=\"0; url=https://gaschem.earthsci.dev/\" />\n</head>\n<body>\n    <p>If you are not redirected automatically, follow this <a href=\"https://gaschem.earthsci.dev/\">link</a>.</p>\n</body>\n</html>","category":"page"},{"location":"edu/overview/#EarthSci-EDU","page":"Overview","title":"EarthSci EDU","text":"","category":"section"},{"location":"edu/overview/","page":"Overview","title":"Overview","text":"For those interested in learning more about GeoScience, we have a series of lessons (well, currently one lesson) using the PrairieLearn online learning platform. The lessons are available at this link. (You might have to click on that link to join the online course before you can access the lessons.)","category":"page"},{"location":"#The-Earth-Science-Machine-Learning-(EarthSciML)-Framework","page":"Home","title":"The Earth Science Machine Learning (EarthSciML) Framework","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"EarthSciML is a next-generation software framework for geoscientific modeling and analysis. It allows geoscientific models to be specified as systems of equations which can be coupled together and compiled to a runnable model. In addition to simplifying the process of creating and using geoscientific models, EarthSciML also (will soon) enable the use of GPU-accelerated simulations as well as automatic creation of advanced analysis tools such as model adjoints.","category":"page"},{"location":"#Simulation","page":"Home","title":"Simulation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A main goal of EarthSciML is to allow users to easily set up and explore dynamics of geoscientific models. Below, we demonstrate this by coupling a model of gas-phase atmospheric chemistry with a model of photolysis and then demonstrating how the resulting dyanamics are affected by temperature:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using EarthSciMLBase, GasChem\nusing ModelingToolkit, OrdinaryDiffEq, Plots, SymbolicIndexingInterface\n\nmodel = convert(ODESystem, couple(SuperFast(), FastJX()))\n\nprob = ODEProblem(model, (), (0,3*24*3600))\nT_setter = setp(prob, [model.SuperFastâ‚ŠT, model.FastJXâ‚ŠT])\n\n# Create an animation of the Oâ‚ƒ concentration as a function of temperature.\nanim = @animate for T in 100:10:400\n    T_setter(prob, (T, T))\n    sol = solve(prob, Rosenbrock23())\n    plot(sol.t, sol[model.SuperFastâ‚ŠO3], xlabel=\"Time (s)\", ylim=(0, 50),\n        ylabel=\"Oâ‚ƒ Concentration (ppb)\", label=:none, title=\"T=$T K\")\nend\ngif(anim, fps = 10)","category":"page"},{"location":"#Analysis","page":"Home","title":"Analysis","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A second main goal of EarthSciML is to make it easy to perform advanced analysis of model dynamics, particularly the type of analysis that can streamline the integration of geoscientific modeling and machine learning. Below, we demonstrate this by using gradient descent with automatic differentiation to find a temperature that results in an average ozone concentration of 25 ppb.","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Optimization, OptimizationOptimJL\nusing ForwardDiff\nusing Statistics\n\n# Set up functions to run the simulation and calculate the error.\nfunction run_simulation(u)\n    T = u[1]\n    p2 = remake_buffer(model, prob.p, Dict(model.SuperFastâ‚ŠT => T, model.FastJXâ‚ŠT => T))\n    solve(remake(prob, p=p2), Rosenbrock23())\nend\nloss(u) = (mean(run_simulation(u)[model.SuperFastâ‚ŠO3]) - 25)^2\n\nT = [290.0] # Starting guess for the temperature.\nanim = @animate for i in 1:100\n    g = ForwardDiff.gradient(loss, T) # Calculate the gradient of error w.r.t T.\n    global T -= 5g # Update the temperature.\n\n    # Make a plot of the simulation.\n    sol = run_simulation(T)\n    o3avg = round(mean(sol[model.SuperFastâ‚ŠO3]), digits=3)\n    plot(sol.t, sol[model.SuperFastâ‚ŠO3], label=:none, ylim=(0, 35),\n        xlabel=\"Time (s)\", ylabel=\"Oâ‚ƒ Concentration (ppb)\",\n        title=\"Step=$i; T=$(round(T[1], digits=3)) K; Oâ‚ƒ avg.=$(o3avg) ppb\", )\n    plot!([sol.t[begin], sol.t[end]], [o3avg, o3avg], label=:none,\n        linecolor=:black, linestyle=:dash)\n\n    if abs(g[1]) < 1e-2\n        break\n    end\nend\ngif(anim, fps = 5)","category":"page"},{"location":"#Where-to-Start","page":"Home","title":"Where to Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you'd like to know more about the available capabilities, check out our Examples section.\nIf you're interested in jumping right in and using the framework on your own computer, check out the Getting Started section.\nIf you're interested in learning about the theory behind geoscientific modeling and machine learning, check out EarthSci EDU.\nFinally, if you're interested in contributing to the project, check Contributing.","category":"page"},{"location":"#Reproducibility","page":"Home","title":"Reproducibility","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"<details><summary>The documentation of this EarthSciML package was built using these direct dependencies,</summary>","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg # hide\nPkg.status() # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"","page":"Home","title":"Home","text":"<details><summary>and using this machine and Julia version.</summary>","category":"page"},{"location":"","page":"Home","title":"Home","text":"using InteractiveUtils # hide\nversioninfo() # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"","page":"Home","title":"Home","text":"<details><summary>A more complete overview of all dependencies and their versions is also provided.</summary>","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg # hide\nPkg.status(;mode = PKGMODE_MANIFEST) # hide","category":"page"},{"location":"","page":"Home","title":"Home","text":"</details>","category":"page"},{"location":"","page":"Home","title":"Home","text":"You can also download the \n<a href=\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"using TOML\nusing Markdown\nversion = TOML.parse(read(\"../Project.toml\",String))[\"version\"]\nname = TOML.parse(read(\"../Project.toml\",String))[\"name\"]\nlink = Markdown.MD(\"https://github.com/EarthSciML/\"*name*\"/tree/gh-pages/v\"*version*\"/assets/Manifest.toml\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"\">manifest</a> file and the\n<a href=\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"using TOML\nusing Markdown\nversion = TOML.parse(read(\"../Project.toml\",String))[\"version\"]\nname = TOML.parse(read(\"../Project.toml\",String))[\"name\"]\nlink = Markdown.MD(\"https://github.com/EarthSciML/\"*name*\"/tree/gh-pages/v\"*version*\"/assets/Project.toml\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"\">project</a> file.","category":"page"},{"location":"quickstart/getting_started/#Getting-Started","page":"Overview","title":"Getting Started","text":"","category":"section"},{"location":"quickstart/getting_started/","page":"Overview","title":"Overview","text":"This section contains a information describing the basics of how EarthSciML works and how to get started using it on your own computer.","category":"page"}]
}
